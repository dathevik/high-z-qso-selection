Index: catalog_delve-qso_flux.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/python\n\nimport numpy as np\nimport os\nfrom astropy.io import fits\nfrom astropy.io import ascii\nimport astropy.units as u # to define units\n\n############################################################################################################\n############################################################################################################\n\ndir = os.path.abspath('input_test/')\n############################################################################################################\n############################################################################################################\n\n\nfile = fits.open(dir+'cut_test_input.fits')  # open a FITS file\n\nhdr_o = file[0].header\n#list(hdr.keys())\n\nt = file[1].data\ncols = t.columns\n#cols.names\n#print(t.columns)\n#print(cols.names)\n\n\nfor col in cols.names[4:]:\n\tif hasattr(t[col], \"mask\"):\n\t\tt[col][t[col].mask] = np.nan\n\tw = np.where((t[col] == -99.0) | (t[col] == 9999.0) | (t[col] < 0.) | (t[col] > 50.))\n\tif len(w[0]) > 0:\n\t\tt[col][w] = np.nan\n\n\nfile.writeto(dir+\"mag_ALL_nan.fits\", overwrite=True)  ## create the new mag nan fits table\nfile.close()\n\n\n##############\n\nf = fits.open(dir+'mag_ALL_nan.fits')  # open a FITS file\n\nhdr = f[0].header\n#list(hdr.keys())\n\ntbdata = f[1].data\ncols = tbdata.columns\ncols.names\n\n\nid_list = tbdata['quick_object_id'][:] \nprint('ids: ')\nprint(len(id_list))\n\nra = tbdata['ra'][:]\ndec = tbdata['dec'][:]\n\n#### reddhift photometrico\nz_1 = np.ones((len(id_list)))\nz = z_1*-1.\nprint (z)\nprint (len(z))\n\n\n\n#### From AB mag to  flux [Jy]: AB=2.5*(23-log10(F/Jy))-48.6\n\n\ndef mag_to_flux(mag, err):\t\n\tprint(mag, err)\n\tflux_mJy = (mag*u.ABmag).to('mJy')\n\n\tmag_2 = mag + err\n\tprint(mag_2)\n\tflux_err_mJy = (mag_2*u.ABmag).to('mJy')\n\terr_final = np.abs(flux_mJy - flux_err_mJy)\n\t\n\treturn flux_mJy, err_final\n\n\n####################################  SDSS  ##########################################\n###### u\n#uflux_mJy_sdss, uerr_final_sdss = mag_to_flux(tbdata['petromag_u_sdss'][:], tbdata['petromagerr_u_sdss'][:])\n###### g\n#gflux_mJy_sdss, gerr_final_sdss = mag_to_flux(tbdata['petromag_g_sdss'][:], tbdata['petromagerr_g_sdss'][:])\n###### r\n#rflux_mJy_sdss, rerr_final_sdss = mag_to_flux(tbdata['petromag_r_sdss'][:], tbdata['petromagerr_r_sdss'][:])\n###### i\n#iflux_mJy_sdss, ierr_final_sdss = mag_to_flux(tbdata['petromag_i_sdss'][:], tbdata['petromagerr_i_sdss'][:])\n###### z\n#zflux_mJy_sdss, zerr_final_sdss = mag_to_flux(tbdata['petromag_z_sdss'][:], tbdata['petromagerr_z_sdss'][:])\n\n\n####################################  DES  ##########################################\n###### g\n#gflux_mJy_des, gerr_final_des = mag_to_flux(tbdata['petromag_g_des'][:], tbdata['petromagerr_g_des'][:])\n###### r\n#rflux_mJy_des, rerr_final_des = mag_to_flux(tbdata['petromag_r_des'][:], tbdata['petromagerr_r_des'][:])\n###### i\n#iflux_mJy_des, ierr_final_des = mag_to_flux(tbdata['petromag_i_des'][:], tbdata['petromagerr_i_des'][:])\n###### z\n#zflux_mJy_des, zerr_final_des = mag_to_flux(tbdata['petromag_z_des'][:], tbdata['petromagerr_z_des'][:])\n\n\n####################################  DELVE  ##########################################\n###### g\ngflux_mJy_delve, gerr_final_delve = mag_to_flux(tbdata['mag_auto_g'][:], tbdata['magerr_auto_g'][:])\n###### r\nrflux_mJy_delve, rerr_final_delve = mag_to_flux(tbdata['mag_auto_r'][:], tbdata['magerr_auto_r'][:])\n###### i\niflux_mJy_delve, ierr_final_delve = mag_to_flux(tbdata['mag_auto_i'][:], tbdata['magerr_auto_i'][:])\n###### z\nzflux_mJy_delve, zerr_final_delve = mag_to_flux(tbdata['mag_auto_z'][:], tbdata['magerr_auto_z'][:])\n\n\n####################################  VHS  ##########################################\n\n###### Y mag\nY_ABmag = tbdata['ypetromag'][:] + 0.6\nyflux_mJy_vhs, yerr_final_vhs = mag_to_flux(Y_ABmag, tbdata['ypetromagerr'][:])\n\n###### J mag\nJ_ABmag = tbdata['jpetromag'][:] + 0.916\njflux_mJy_vhs, jerr_final_vhs = mag_to_flux(J_ABmag, tbdata['jpetromagerr'][:])\n\n###### H mag\nH_ABmag = tbdata['hpetromag'][:] + 1.366\nhflux_mJy_vhs, herr_final_vhs = mag_to_flux(H_ABmag, tbdata['hpetromagerr'][:])\n\n###### Ks mag\nKS_ABmag = tbdata['kspetromag'][:] + 1.827\nksflux_mJy_vhs, kserr_final_vhs = mag_to_flux(KS_ABmag, tbdata['kspetromagerr'][:])\n\n\n####################################  UKIDSS  ##########################################\n###### Y mag\n#yflux_mJy_ukidss, yerr_final_ukidss = mag_to_flux(tbdata['petromag_Y_ukidss'][:], tbdata['petromagerr_Y_ukidss'][:])\n###### J mag\n#jflux_mJy_ukidss, jerr_final_ukidss = mag_to_flux(tbdata['petromag_J_ukidss'][:], tbdata['petromagerr_J_ukidss'][:])\n###### H mag\n#hflux_mJy_ukidss, herr_final_ukidss = mag_to_flux(tbdata['petromag_H_ukidss'][:], tbdata['petromagerr_H_ukidss'][:])\n###### Ks mag\n#kflux_mJy_ukidss, kerr_final_ukidss = mag_to_flux(tbdata['petromag_K_ukidss'][:], tbdata['petromagerr_K_ukidss'][:])\n\n\n####################################  WISE  ##########################################\n###### W1\nW1_ABmag = tbdata['w1mpro'][:] + 2.699\nw1flux_mJy, w1err_final = mag_to_flux(W1_ABmag, tbdata['w1sigmpro'][:])\n\n###### W2\nW2_ABmag = tbdata['w2mpro'][:] + 3.339\nw2flux_mJy, w2err_final = mag_to_flux(W2_ABmag, tbdata['w2sigmpro'][:])\n###### W3\n#w3flux_mJy, w3err_final = mag_to_flux(tbdata['intmag_w3_allwise'][:], tbdata['intmagerr_w3_catwise'][:])\n###### W4\n#w4flux_mJy, w4err_final = mag_to_flux(tbdata['intmag_w4_allwise'][:], tbdata['intmagerr_w4_catwise'][:])\n\n############# W3 upper limits ########\n \n#new_W3, new_W3err = [],[] # w3flux_mJy, w3err_final\n#for i in range(len(w3flux_mJy)):\n\n#\tif (w3flux_mJy[i] > 0. and w3err_final[i] > 0.): \n#\t\tprint('detection:   W3 = '+str(w3flux_mJy[i])+ ', W3_err = '+str(w3err_final[i]))\n#\t\tnew_W3.append(float(w3flux_mJy[i].value))\n#\t\tnew_W3err.append(float(w3err_final[i].value))\n\t\t\n#\telif (w3flux_mJy[i] > 0. and str(w3err_final[i].value) == 'nan'): \n#\t\tprint('upper limit:   W3 = '+str(w3flux_mJy[i])+ ', W3_err = '+str(w3err_final[i]))\n#\t\tnew_flux_err = w3flux_mJy[i].value*-1.\n#\t\tnew_W3.append(float(w3flux_mJy[i].value))\n#\t\tnew_W3err.append(float(new_flux_err))\t\n\t\t\n#\telif str(w3flux_mJy[i].value) == 'nan':\n#\t\tprint('no information:   W3 = '+str(w3flux_mJy[i])+ ', W3_err = '+str(w3err_final[i]))\n#\t\tnew_W3.append(float(w3flux_mJy[i].value))\n#\t\tnew_W3err.append(float(w3err_final[i].value))\n\t\t\n#\telse: continue\n\t\t\n########### W4 upper limits #########\n \n#new_W4, new_W4err = [],[]\n#for j in range(len(w4flux_mJy)):\n\n#\tif (w4flux_mJy[j] > 0. and w4err_final[j] > 0.): \n#\t\tprint('detection:   W4 = '+str(w4flux_mJy[j])+ ', W4_err = '+str(w4err_final[j]))\n#\t\tnew_W4.append(float(w4flux_mJy[j].value))\n#\t\tnew_W4err.append(float(w4err_final[j].value))\n\t\t\n#\telif (w4flux_mJy[j] > 0. and str(w4err_final[j].value) == 'nan'): \n#\t\tprint('upper limit:   W4 = '+str(w4flux_mJy[j])+ ', W4_err = '+str(w4err_final[j]))\n#\t\tnew_flux_err = w4flux_mJy[j].value*-1.\n#\t\tnew_W4.append(float(w4flux_mJy[j].value))\n#\t\tnew_W4err.append(float(new_flux_err))\t\n\t\t\n#\telif str(w4flux_mJy[j].value) == 'nan':\n#\t\tprint('no information:   W4 = '+str(w4flux_mJy[j])+ ', W4_err = '+str(w4err_final[j]))\n#\t\tnew_W4.append(float(w4flux_mJy[j].value))\n#\t\tnew_W4err.append(float(w4err_final[j].value))\n\t\t\n#\telse: continue\n\n\n\n####################################  GALEX  ##########################################\n###### NUV\n#nuvflux_mJy, nuverr_final = mag_to_flux(tbdata['kronmag_NUV_galex'][:], tbdata['kronmagerr_NUV_galex'][:])\n###### FUV\n#fuvflux_mJy, fuverr_final = mag_to_flux(tbdata['kronmag_FUV_galex'][:], tbdata['kronmagerr_FUV_galex'][:])\n\n\n\n#### output file\n#uflux_mJy_sdss, uerr_final_sdss, gflux_mJy_sdss, gerr_final_sdss, rflux_mJy_sdss, rerr_final_sdss, iflux_mJy_sdss, ierr_final_sdss, zflux_mJy_sdss, zerr_final_sdss, \n#gflux_mJy_des, gerr_final_des, rflux_mJy_des, rerr_final_des, iflux_mJy_des, ierr_final_des, zflux_mJy_des, zerr_final_des, \n\t\t\t\n\t\t\t\n#'u_prime_sdss', 'u_prime_err_sdss', 'g_prime_sdss', 'g_prime_err_sdss', 'r_prime_sdss', 'r_prime_err_sdss', 'i_prime_sdss', 'i_prime_err_sdss', 'z_prime_sdss', 'z_prime_err_sdss',\n#'g_prime_des', 'g_prime_err_des', 'r_prime_des', 'r_prime_err_des', 'i_prime_des', 'i_prime_err_des', 'z_prime_des', 'z_prime_err_des',\n            \t   \n\nascii.write([id_list, ra, dec, z, \n\t\t\tgflux_mJy_delve, gerr_final_delve, rflux_mJy_delve, rerr_final_delve, iflux_mJy_delve, ierr_final_delve, zflux_mJy_delve, zerr_final_delve, \n\t\t\tyflux_mJy_vhs, yerr_final_vhs, jflux_mJy_vhs, jerr_final_vhs, hflux_mJy_vhs, herr_final_vhs, ksflux_mJy_vhs, kserr_final_vhs,\n\t\t\tw1flux_mJy, w1err_final, w2flux_mJy, w2err_final], \n            dir+'test_input_flux.dat',\n            names=['#id', 'ra', 'dec', 'redshift', \n            \t   'g_prime_delve', 'g_prime_err_delve', 'r_prime_delve', 'r_prime_err_delve', 'i_prime_delve', 'i_prime_err_delve', 'z_prime_delve', 'z_prime_err_delve',\n            \t   'vista.vircam.Y_vhs', 'vista.vircam.Y_err_vhs', 'vista.vircam.J_vhs', 'vista.vircam.J_err_vhs', 'vista.vircam.H_vhs', 'vista.vircam.H_err_vhs', 'vista.vircam.Ks_vhs', 'vista.vircam.Ks_err_vhs',  \n                   'WISE1', 'WISE1_err', 'WISE2', 'WISE2_err'],  \n                   overwrite=True)\n         \n         # yflux_mJy_ukidss, yerr_final_ukidss, jflux_mJy_ukidss, jerr_final_ukidss, hflux_mJy_ukidss, herr_final_ukidss, kflux_mJy_ukidss, kerr_final_ukidss,\n         # new_W3, new_W3err, new_W4, new_W4err,            \n\t\t # nuvflux_mJy, nuverr_final, fuvflux_mJy, fuverr_final], \n\t\t \n\t\t # 'ukirt.Y', 'ukirt.Y_err', 'ukirt.J', 'ukirt.J_err', 'ukirt.H', 'ukirt.H_err', 'ukirt.Ks', 'ukirt.Ks_err',\n\t\t # 'WISE3', 'WISE3_err', 'WISE4', 'WISE4_err',\n\t\t # 'galex.NUV', 'galex.NUV_err', 'galex.FUV', 'galex.FUV_err'\n\t\t \n\t\t \n\t\t \n\t\t 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/catalog_delve-qso_flux.py b/catalog_delve-qso_flux.py
--- a/catalog_delve-qso_flux.py	(revision 6f277a89f5cf15f2600e2a18e18daeaa69d9372d)
+++ b/catalog_delve-qso_flux.py	(date 1676844338823)
@@ -14,7 +14,7 @@
 ############################################################################################################
 
 
-file = fits.open(dir+'cut_test_input.fits')  # open a FITS file
+file = fits.open(dir+'/cut_stripe82_original_04.fits')  # open a FITS file
 
 hdr_o = file[0].header
 #list(hdr.keys())
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2e80936c-1afd-4e14-8d80-9141481e15d0\" name=\"Changes\" comment=\"initial commit&#10;Working code both for sed_cutting and sed_calculation of the best QSO_chi2 and BD_chi2. Working plot file to plot the source as an output png in output_test directory. Also the code that converts magnitudes to fluxes.\">\n      <change beforePath=\"$PROJECT_DIR$/catalog_delve-qso_flux.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/catalog_delve-qso_flux.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/results_analysis.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/results_analysis.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/sed_calculation.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/sed_calculation.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"SWAP_SIDES_IN_COMPARE_BRANCHES\" value=\"true\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2Lq2ftoiWoo70uIPOp47M9aapH5\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/dathev/PhD_Projects/4MOST/qso-bd-selection&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;project.propVCSSupport.DirectoryMappings&quot;\n  }\n}</component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2e80936c-1afd-4e14-8d80-9141481e15d0\" name=\"Changes\" comment=\"\" />\n      <created>1676584398831</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1676584398831</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"initial commit&#10;Working code both for sed_cutting and sed_calculation of the best QSO_chi2 and BD_chi2. Working plot file to plot the source as an output png in output_test directory. Also the code that converts magnitudes to fluxes.\">\n      <created>1676585836905</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676585836906</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"initial commit&#10;Working code both for sed_cutting and sed_calculation of the best QSO_chi2 and BD_chi2. Working plot file to plot the source as an output png in output_test directory. Also the code that converts magnitudes to fluxes.\">\n      <created>1676586405349</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676586405349</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"initial commit&#10;Changes in results_analysis.py. Now it is working with the results.csv files giving an output of plots: histograms of QSO_Chi2, BD_Chi2, R_Chi2 as well as a scatter plot of R_chi2 and QSO_chi2.\">\n      <created>1676986559523</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1676986559523</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"4\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n        <entry key=\"d69444c0-e650-4ba8-b5b0-9f148033d7fb\">\n          <value>\n            <State>\n              <option name=\"SHOW_ONLY_AFFECTED_CHANGES\" value=\"true\" />\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"HEAD\" />\n                      </list>\n                    </value>\n                  </entry>\n                  <entry key=\"roots\">\n                    <value>\n                      <list>\n                        <option value=\"$PROJECT_DIR$\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"OPEN_GENERIC_TABS\">\n      <map>\n        <entry key=\"d69444c0-e650-4ba8-b5b0-9f148033d7fb\" value=\"TOOL_WINDOW\" />\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <ignored-roots>\n      <path value=\"$PROJECT_DIR$/..\" />\n      <path value=\"$PROJECT_DIR$\" />\n    </ignored-roots>\n    <MESSAGE value=\"initial commit&#10;Working code both for sed_cutting and sed_calculation of the best QSO_chi2 and BD_chi2. Working plot file to plot the source as an output png in output_test directory. Also the code that converts magnitudes to fluxes.\" />\n    <MESSAGE value=\"initial commit&#10;Changes in results_analysis.py. Now it is working with the results.csv files giving an output of plots: histograms of QSO_Chi2, BD_Chi2, R_Chi2 as well as a scatter plot of R_chi2 and QSO_chi2.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"initial commit&#10;Changes in results_analysis.py. Now it is working with the results.csv files giving an output of plots: histograms of QSO_Chi2, BD_Chi2, R_Chi2 as well as a scatter plot of R_chi2 and QSO_chi2.\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6f277a89f5cf15f2600e2a18e18daeaa69d9372d)
+++ b/.idea/workspace.xml	(date 1676986982295)
@@ -6,7 +6,6 @@
   <component name="ChangeListManager">
     <list default="true" id="2e80936c-1afd-4e14-8d80-9141481e15d0" name="Changes" comment="initial commit&#10;Working code both for sed_cutting and sed_calculation of the best QSO_chi2 and BD_chi2. Working plot file to plot the source as an output png in output_test directory. Also the code that converts magnitudes to fluxes.">
       <change beforePath="$PROJECT_DIR$/catalog_delve-qso_flux.py" beforeDir="false" afterPath="$PROJECT_DIR$/catalog_delve-qso_flux.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/results_analysis.py" beforeDir="false" afterPath="$PROJECT_DIR$/results_analysis.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/sed_calculation.py" beforeDir="false" afterPath="$PROJECT_DIR$/sed_calculation.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -65,7 +64,21 @@
       <option name="project" value="LOCAL" />
       <updated>1676986559523</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="Changes in results_analysis.py. Now it is running with the input of results.csv file, generated from sed_calculation.py. As an output it will give several plots: histograms of QSO_Chi2, BD_Chi2, R_Chi2 as well as a scatter plot of R_chi2 and QSO_chi2.">
+      <created>1676986828225</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1676986828225</updated>
+    </task>
+    <task id="LOCAL-00005" summary="Minor changes in comments">
+      <created>1676986876252</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1676986876252</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -116,6 +129,8 @@
     </ignored-roots>
     <MESSAGE value="initial commit&#10;Working code both for sed_cutting and sed_calculation of the best QSO_chi2 and BD_chi2. Working plot file to plot the source as an output png in output_test directory. Also the code that converts magnitudes to fluxes." />
     <MESSAGE value="initial commit&#10;Changes in results_analysis.py. Now it is working with the results.csv files giving an output of plots: histograms of QSO_Chi2, BD_Chi2, R_Chi2 as well as a scatter plot of R_chi2 and QSO_chi2." />
-    <option name="LAST_COMMIT_MESSAGE" value="initial commit&#10;Changes in results_analysis.py. Now it is working with the results.csv files giving an output of plots: histograms of QSO_Chi2, BD_Chi2, R_Chi2 as well as a scatter plot of R_chi2 and QSO_chi2." />
+    <MESSAGE value="Changes in results_analysis.py. Now it is running with the input of results.csv file, generated from sed_calculation.py. As an output it will give several plots: histograms of QSO_Chi2, BD_Chi2, R_Chi2 as well as a scatter plot of R_chi2 and QSO_chi2." />
+    <MESSAGE value="Minor changes in comments" />
+    <option name="LAST_COMMIT_MESSAGE" value="Minor changes in comments" />
   </component>
 </project>
\ No newline at end of file
Index: sed_calculation.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import shutil\n\nimport numpy as np\nimport os\nfrom astropy.io import ascii\n\n\n\n# ------------------------------- Define functions ---------------------------------\n\n# function for a_scale which is a scaling factor and takes as an input of observed flux, observed flux error of the object and the template model\ndef a_scale(vec_flux_obs, vec_fluxe_obs, vec_flux_model):\n    # ---- Obtain scaling factor for Chi2\n    a = np.sum((vec_flux_obs * vec_flux_model) / (vec_fluxe_obs) ** 2) / np.sum(\n        (vec_flux_model) ** 2 / (vec_fluxe_obs) ** 2)\n    return a\n\n\n# function for calculation of chi2 statistical parameter and takes as an input of observed flux, observed flux error of the object and the template model and a scaling factor\ndef chi2_calc(vec_flux_obs, vec_fluxe_obs, vec_flux_model, a):\n    # ---- Obtain scaling factor for Chi2\n    chi2 = np.sum((vec_flux_obs - a * vec_flux_model) ** 2 / (vec_fluxe_obs) ** 2)\n    return chi2\n\n\n# function for converting cgs parameters to mJy as the whole script works with mJy units of fluxes\ndef flux_from_cgs_to_mJy(flux_cgs, ll):\n    # ---- Obtain flux in mJy from flux in erg/s/cm2/A and considering effective wavelength of the filter in AA\n    flux_mJy = (3.33564095E+04 * flux_cgs * ll ** 2) * 1E-3\n    return flux_mJy\n\n\n# ------------------------------- Main code ---------------------------------\n# I: Define the path and print the data in the created directory\nobjects_path = os.path.abspath('input_test/test_input_flux.dat.dat')\nBD_temp_path = os.path.abspath('input_test/BDRA_fluxes_mJy_202301.dat')\nQSO_temp_path = os.path.abspath('input_test/Selsing+Matt_temp.dat')\nQSO_spec_path = os.path.abspath('input_test/Selsing2015.dat')\noutput_folder = os.path.join(os.path.abspath(''), 'output_test')\nif os.path.exists(output_folder):\n    shutil.rmtree(output_folder)\nos.mkdir(output_folder)\noutput_file = os.path.abspath('output_test/results.csv')\n\nprint(\"READING BD:\", BD_temp_path, \"FILE\")\ndata_bd_temp = ascii.read(BD_temp_path)\n# print(data_bd_temp)\n\nprint(\"READING QSOs:\", QSO_temp_path, \"FILE\")\ndata_qso_temp = ascii.read(QSO_temp_path)\n# print(data_qso_temp)\n\nprint(\"READING INPUT CATALOG:\", objects_path, \"FILE\")\ndata_obj = ascii.read(objects_path)\n# print(data_obj[0])\n\nprint(\"READING SELSING 2015:\", QSO_spec_path, \"FILE\")\ndata_qso_spec = ascii.read(QSO_spec_path)\n# print(data_qso_spec)\n\n# Copying input file to write new calculations in it\noutput_table = []\n\n\n# IIa : Make the vector arrays for Brown Dwarf templates\nBD_g_decam = data_bd_temp.columns[1]\nBD_r_decam = data_bd_temp.columns[2]\nBD_i_decam = data_bd_temp.columns[3]\nBD_z_decam = data_bd_temp.columns[4]\nBD_Y_vhs = data_bd_temp.columns[5]\nBD_J_vhs = data_bd_temp.columns[6]\nBD_H_vhs = data_bd_temp.columns[7]\nBD_K_vhs = data_bd_temp.columns[8]\nBD_W1 = data_bd_temp.columns[9]\nBD_W2 = data_bd_temp.columns[10]\n\n# Read BD template rows in a loop\nBD_vec_flux = []\n\nfor i in range(len(data_bd_temp)):\n    vec_flux = [BD_g_decam[i], BD_r_decam[i], BD_i_decam[i], BD_z_decam[i], BD_Y_vhs[i], BD_J_vhs[i], BD_H_vhs[i],\n                BD_K_vhs[i], BD_W1[i], BD_W2[i]]\n    BD_vec_flux.append(vec_flux)\n\n# Make list with BDs type and print first template as an example\nBD_all_vec_flux = np.array(BD_vec_flux)\nBD_type_vec = [\"BD1\", \"BD2\", \"BD3\", \"BD4\", \"MD1\", \"MD2\", \"MD3\"]\n\nprint(\"------------------------------------------ BD1 Template----------------------------------------------------\")\nprint(BD_all_vec_flux[0])\n\n\n# IIb : Make vector arrays for Quasars templates\nQSO_z_vec = data_qso_temp.columns[1]\nQSO_g_decam = data_qso_temp.columns[2]\nQSO_r_decam = data_qso_temp.columns[3]\nQSO_i_decam = data_qso_temp.columns[4]\nQSO_z_decam = data_qso_temp.columns[5]\nQSO_Y_vhs = data_qso_temp.columns[6]\nQSO_J_vhs = data_qso_temp.columns[7]\nQSO_H_vhs = data_qso_temp.columns[8]\nQSO_K_vhs = data_qso_temp.columns[9]\nQSO_W1 = data_qso_temp.columns[10]\nQSO_W2 = data_qso_temp.columns[11]\nQSO_temp_type = data_qso_temp.columns[0]\nQSO_temp_emline = data_qso_temp.columns[12]\nQSO_temp_ebv = data_qso_temp.columns[13]\n\n# ----- Read Column of Redshift in a loop and print the first template as an example\nQSO_vec_flux = []\n\nfor i in range(len(data_qso_temp)):\n    vec_flux = [QSO_g_decam[i], QSO_r_decam[i], QSO_i_decam[i], QSO_z_decam[i], QSO_Y_vhs[i], QSO_J_vhs[i],\n                QSO_H_vhs[i], QSO_K_vhs[i], QSO_W1[i], QSO_W2[i]]\n    QSO_vec_flux.append(vec_flux)\n\nQSO_all_vec_flux = np.array(QSO_vec_flux)\nprint(\"------------------------------------------ QSO1 Template----------------------------------------------------\")\nprint(QSO_all_vec_flux[0])\n\n# IV : Read wavebands, fluxes and errors from source file\nheader = list(data_obj.columns)\nselect_err = \"err\"\ndel header[:4]\nerrors = [i for i in header if select_err in i]\nwavebands = [i for i in header if i not in errors]\nprint(\"-----------------------------------------WAVEBANDS ------------------------------------------------------\")\nprint(wavebands)\nobject_name = data_obj.columns[0]\nobject_redshift = data_obj[\"redshift\"]\n\n# IVa : Make array for central fluxes of the bands(each of them)\nvec_flux = data_obj[\n    [\"g_prime_delve\", \"r_prime_delve\", \"i_prime_delve\", \"z_prime_delve\", \"vista.vircam.Y_vhs\", \"vista.vircam.J_vhs\",\n     \"vista.vircam.H_vhs\", \"vista.vircam.Ks_vhs\", \"WISE1\", \"WISE2\"]].copy()\n# print(\"-----------------------------------------FLUXES ------------------------------------------------------\")\n# print(vec_flux)\n\n# IVb : Make array for errors of the bands(each of them)\nvec_fluxe = data_obj[\n    [\"g_prime_err_delve\", \"r_prime_err_delve\", \"i_prime_err_delve\", \"z_prime_err_delve\", \"vista.vircam.Y_err_vhs\",\n     \"vista.vircam.J_err_vhs\", \"vista.vircam.H_err_vhs\", \"vista.vircam.Ks_err_vhs\", \"WISE1_err\", \"WISE2_err\"]].copy()\n# print(\"------------------------------------------ WAVEBAND ERRORS----------------------------------------------------\")\n# print(errors)\n\n# Changing flux errors if they are smaller 10 times than the flux\nfor i in range(len(vec_flux.columns)):\n    x = vec_flux.columns[i]\n    y = vec_fluxe.columns[i]\n    for j in range(len(data_obj)):\n        if y[j] < 0.1 * x[j]:\n            y[j] = 0.1 * x[j]\n        if x[j] <= 10 ** -30:\n            x[j] = np.nan\n\n# print(\"------------------------------------------ FLUX ERRORS----------------------------------------------------\")\n# print(vec_fluxe)\n\n# c. Make all arrays with the same dtype in this case float\nvec_flux_model_BD = BD_all_vec_flux.astype(float)\nvec_flux_model_QSO = QSO_all_vec_flux.astype(float)\n\n# V : Calculate Chi2 for BD and QSO templates\nfor i in range(len(data_obj)):\n# for i in range(3):\n    print(\"----------------------------------------- RUN FOR OBJECT NUMBER\", i,\n          \"----------------------------------------\")\n\n    BD_Chi2_array = []\n    QSO_Chi2_array = []\n    R_Chi = []\n    a_BD_array = []\n    a_QSO_array = []\n    ls_id = object_name[i]\n    object_z = object_redshift[i]\n\n    vec_flux_row = vec_flux[i]\n    vec_fluxe_row = vec_fluxe[i]\n    vec_flux_obs0 = np.array(\n        [vec_flux_row[0], vec_flux_row[1], vec_flux_row[2], vec_flux_row[3], vec_flux_row[4], vec_flux_row[5],\n         vec_flux_row[6], vec_flux_row[7], vec_flux_row[8], vec_flux_row[9]])\n    vec_fluxe_obs0 = np.array(\n        [vec_fluxe_row[0], vec_fluxe_row[1], vec_fluxe_row[2], vec_fluxe_row[3], vec_fluxe_row[4], vec_fluxe_row[5],\n         vec_fluxe_row[6], vec_fluxe_row[7], vec_fluxe_row[8], vec_fluxe_row[9]])\n\n    # ---- mask the nan value, which means it will not be used for the calculation\n    mask_nan = ~np.isnan(vec_flux_obs0)\n    vec_flux_obs = vec_flux_obs0[mask_nan]\n    vec_fluxe_obs = vec_fluxe_obs0[mask_nan]\n    # print(vec_flux_obs)\n\n    # Va : Calculate scaling factor and Chi2 for BDs\n    for j in range(len(data_bd_temp)):\n        vec_flux_model_BD_j0 = vec_flux_model_BD[j]\n        vec_flux_model_BD_j = vec_flux_model_BD_j0[mask_nan]\n        a_BD = a_scale(vec_flux_obs, vec_fluxe_obs, vec_flux_model_BD_j)\n        a_BD = a_BD.astype(float)\n        Chi2_BD = chi2_calc(vec_flux_obs, vec_fluxe_obs, vec_flux_model_BD_j, a_BD)\n        BD_Chi2_array.append(Chi2_BD)\n        a_BD_array.append(a_BD)\n    # print(BD_Chi2_array)\n\n    # Vb : Calculate scaling factor and Chi2 for QSOs\n    for k in range(len(data_qso_temp)):\n        vec_flux_model_QSO_k0 = vec_flux_model_QSO[k]\n        vec_flux_model_QSO_k = vec_flux_model_QSO_k0[mask_nan]\n        a_QSO = a_scale(vec_flux_obs, vec_fluxe_obs, vec_flux_model_QSO_k)\n        a_QSO = a_QSO.astype(float)\n        Chi2_QSO = chi2_calc(vec_flux_obs, vec_fluxe_obs, vec_flux_model_QSO_k, a_QSO)\n        QSO_Chi2_array.append(Chi2_QSO)\n        a_QSO_array.append(a_QSO)\n    # print(QSO_Chi2_array)\n\n    # VI : Calculate and print out the template with the best (lowest) Chi2 for QSOs and BDs\n    # VIa : Calculate the lowest value for the Chi2 for the BDs\n    BD_Chi2_min = np.min(BD_Chi2_array)  # -- minimum value\n    BD_Chi2_min_ind = np.argmin(BD_Chi2_array)  # -- position in array\n    a_BD_best = a_BD_array[BD_Chi2_min_ind]  # -- corresponding scaling factor of the best chi2\n    BD_Chi2_min_temp = BD_type_vec[BD_Chi2_min_ind]  # -- corresponding best template\n    vec_flux_model_BD_best = BD_all_vec_flux[BD_Chi2_min_ind][mask_nan] * a_BD_best\n    print(\"-------------------------------------------------\")\n    print(\"Best Chi2 BD:\", BD_Chi2_min)\n    print(\"Which BD templates:\", BD_Chi2_min_temp)\n\n    # VIb. Calculate the lowest value for the Chi2 for the QSOs\n    QSO_Chi2_min = np.min(QSO_Chi2_array)  # -- minimum value\n    QSO_Chi2_min_ind = np.argmin(QSO_Chi2_array)  # -- position in array\n    a_QSO_best = a_QSO_array[QSO_Chi2_min_ind]  # -- corresponding scaling factor of the best chi2\n    QSO_Chi2_min_z = QSO_z_vec[QSO_Chi2_min_ind]  # -- corresponding best template -> best redshift\n    vec_flux_model_QSO_best = QSO_all_vec_flux[QSO_Chi2_min_ind][mask_nan] * a_QSO_best\n    temp_ebv_best = QSO_temp_ebv[QSO_Chi2_min_ind]\n    temp_type_best = QSO_temp_type[QSO_Chi2_min_ind]\n    temp_emline_best = QSO_temp_emline[QSO_Chi2_min_ind]\n    print(\"-------------------------------------------------\")\n    print(\"Best Chi2 QSO:\", QSO_Chi2_min)\n    print(\"Which QSO redshift:\", QSO_Chi2_min_z)\n    print(\"Which QSO template:\", temp_type_best)\n    print(\"Which template emline:\", temp_emline_best)\n    print(\"Which template EBV:\", temp_ebv_best)\n    # ----Calculate the ratio of chi2 of each QSO and BD templates\n    R = QSO_Chi2_min / BD_Chi2_min\n    R_Chi.append(R)\n    print(\"-------------------------------------------------\")\n    print(\"The Chi2 ratio is\", R)\n\n    # ---- Collect results of the calculation in one array and sort it in descending order of χ2_Ratio\n    output_table.append(\n        [ls_id, object_z, BD_Chi2_min, BD_Chi2_min_temp, QSO_Chi2_min, QSO_Chi2_min_z, R_Chi, temp_type_best, temp_emline_best,\n         temp_ebv_best])\n\noutput_table = np.array(output_table, dtype=object)\noutput_table.resize([len(data_obj), 10])\nsorted_output_table = sorted(output_table, key=lambda x:(x[6], x[4]))\noutput_headers = ['Object_Name', 'Object_Redshift', 'BD_χ2_min', 'BD_template', 'QSO_χ2_min', 'QSO_template_z', 'χ2_Ratio', 'QSO_template', 'QSO_temp_emline', 'QSO_temp_ebv']\nsorted_output_table = np.vstack([output_headers, sorted_output_table]) # The final matrix is one element bigger\n\nnp.savetxt(output_file, sorted_output_table, fmt='%s')\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sed_calculation.py b/sed_calculation.py
--- a/sed_calculation.py	(revision 6f277a89f5cf15f2600e2a18e18daeaa69d9372d)
+++ b/sed_calculation.py	(date 1676907318194)
@@ -40,7 +40,7 @@
 if os.path.exists(output_folder):
     shutil.rmtree(output_folder)
 os.mkdir(output_folder)
-output_file = os.path.abspath('output_test/results.csv')
+output_file = os.path.abspath('output_test/results.fits')
 
 print("READING BD:", BD_temp_path, "FILE")
 data_bd_temp = ascii.read(BD_temp_path)
